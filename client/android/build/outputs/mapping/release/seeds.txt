androidx.lifecycle.LegacySavedStateHandleController$1
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap
androidx.core.app.RemoteActionCompat
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable
com.hasanchik.game.AndroidLauncher
androidx.lifecycle.SavedStateHandleAttacher
androidx.activity.ComponentActivity$4
androidx.lifecycle.CompositeGeneratedAdaptersObserver
androidx.lifecycle.SavedStateHandleController
androidx.core.graphics.drawable.IconCompatParcelizer
androidx.annotation.Keep
androidx.lifecycle.Lifecycling$1
com.badlogic.gdx.utils.BufferUtils
androidx.versionedparcelable.CustomVersionedParcelable
kotlin.coroutines.jvm.internal.BaseContinuationImpl
androidx.fragment.app.FragmentManager$6
androidx.activity.ImmLeaksCleaner
androidx.lifecycle.ReflectiveGenericLifecycleObserver
android.support.v4.app.RemoteActionCompatParcelizer
androidx.lifecycle.FullLifecycleObserverAdapter
kotlinx.coroutines.android.AndroidDispatcherFactory
androidx.core.app.CoreComponentFactory
androidx.fragment.app.Fragment$6
androidx.lifecycle.SingleGeneratedAdapterObserver
com.badlogic.gdx.controllers.android.ControllerLifeCycleListener
com.badlogic.gdx.controllers.android.AndroidControllers
androidx.activity.ComponentActivity$5
androidx.core.app.RemoteActionCompatParcelizer
android.support.v4.graphics.drawable.IconCompatParcelizer
androidx.activity.result.ActivityResultRegistry$1
kotlinx.coroutines.android.AndroidExceptionPreHandler
kotlin.internal.jdk8.JDK8PlatformImplementations
com.badlogic.gdx.math.Matrix4
kotlinx.coroutines.internal.StackTraceRecoveryKt
androidx.activity.ComponentActivity$3
androidx.core.graphics.drawable.IconCompat
androidx.versionedparcelable.ParcelImpl
androidx.savedstate.Recreator
androidx.lifecycle.LiveData$LifecycleBoundObserver
kotlin.internal.jdk7.JDK7PlatformImplementations
kotlinx.coroutines.JobSupport$Finishing: int _isCompleting
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _removedRef
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.Object _preHandler
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _rootCause
kotlinx.coroutines.CancellableContinuationImpl: int _decision
kotlinx.coroutines.scheduling.WorkQueue: int producerIndex
kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _exceptionsHolder
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl
androidx.versionedparcelable.ParcelImpl: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.CancelledContinuation: int _resumed
kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state
kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer
kotlinx.coroutines.JobSupport: java.lang.Object _parentHandle
kotlinx.coroutines.DispatchedCoroutine: int _decision
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next
kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex
kotlinx.coroutines.EventLoopImplBase: int _isCompleted
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed
kotlinx.coroutines.internal.ThreadSafeHeap: int _size
kotlinx.coroutines.internal.AtomicOp: java.lang.Object _consensus
kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState
kotlinx.coroutines.InvokeOnCancelling: int _invoked
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation
kotlinx.coroutines.JobSupport: java.lang.Object _state
kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object _cur
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _state
kotlinx.coroutines.DefaultExecutor: int debugStatus
kotlinx.coroutines.internal.LimitedDispatcher: int runningWorkers
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key key
kotlinx.coroutines.android.HandlerDispatcherKt: android.view.Choreographer choreographer
kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext _immediate
kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array
kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue
kotlinx.coroutines.CompletedExceptionally: int _handled
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev
kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String)
kotlin.jvm.internal.PropertyReference: PropertyReference()
com.badlogic.gdx.utils.IntMap: IntMap()
com.badlogic.gdx.Input$OnscreenKeyboardType: com.badlogic.gdx.Input$OnscreenKeyboardType valueOf(java.lang.String)
com.badlogic.gdx.controllers.android.AndroidControllerEvent: AndroidControllerEvent()
kotlinx.coroutines.CoroutineDispatcher: CoroutineDispatcher()
com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent: DefaultAndroidInput$KeyEvent()
com.badlogic.gdx.Input$OnscreenKeyboardType: com.badlogic.gdx.Input$OnscreenKeyboardType[] values()
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String)
kotlinx.coroutines.android.AndroidExceptionPreHandler: AndroidExceptionPreHandler()
com.badlogic.gdx.utils.IntIntMap: IntIntMap()
kotlinx.coroutines.CancelHandler: CancelHandler()
kotlinx.coroutines.JobCancellingNode: JobCancellingNode()
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType[] values()
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Drawable loadDrawable(android.graphics.drawable.Icon,android.content.Context)
kotlinx.coroutines.android.AndroidDispatcherFactory: int getLoadPriority()
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)
com.badlogic.gdx.graphics.TextureData$TextureDataType: com.badlogic.gdx.graphics.TextureData$TextureDataType valueOf(java.lang.String)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawPixmap(long,long,int,int,int,int,int,int,int,int)
kotlinx.coroutines.internal.LockFreeLinkedListHead: LockFreeLinkedListHead()
kotlinx.coroutines.MainCoroutineDispatcher: MainCoroutineDispatcher()
kotlinx.coroutines.ExecutorCoroutineDispatcher: ExecutorCoroutineDispatcher()
kotlin.internal.jdk7.JDK7PlatformImplementations: JDK7PlatformImplementations()
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Icon toIcon(androidx.core.graphics.drawable.IconCompat,android.content.Context)
androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.core.graphics.drawable.IconCompat$Api28Impl: android.net.Uri getUri(java.lang.Object)
lombok.launch.Main: Main()
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.net.Uri getUri(java.lang.Object)
kotlinx.coroutines.JobNode: JobNode()
kotlin.jvm.internal.Intrinsics: Intrinsics()
android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void setBlend(long,int)
com.badlogic.gdx.math.Matrix4: void prj(float[],float[],int,int,int)
com.hasanchik.game.screens.ScreenType: com.hasanchik.game.screens.ScreenType[] values()
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getResId(java.lang.Object)
com.badlogic.gdx.utils.IntSet: IntSet()
kotlin.collections.IntIterator: IntIterator()
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] values()
com.hasanchik.game.screens.ScreenType: com.hasanchik.game.screens.ScreenType valueOf(java.lang.String)
android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
com.badlogic.gdx.utils.StringBuilder: StringBuilder()
com.badlogic.gdx.graphics.Pixmap$Blending: com.badlogic.gdx.graphics.Pixmap$Blending valueOf(java.lang.String)
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List)
com.hasanchik.game.MyGame: MyGame()
com.badlogic.gdx.utils.SharedLibraryLoader: SharedLibraryLoader()
androidx.collection.SimpleArrayMap: SimpleArrayMap()
com.badlogic.gdx.graphics.Color: Color()
com.badlogic.gdx.backends.android.AndroidApplication: AndroidApplication()
kotlinx.coroutines.EventLoopImplBase: EventLoopImplBase()
kotlinx.coroutines.android.AndroidExceptionPreHandler: void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)
kotlinx.coroutines.internal.OpDescriptor: OpDescriptor()
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String)
kotlinx.coroutines.NodeList: NodeList()
androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
android.support.v4.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
kotlin.random.Random: Random()
kotlinx.coroutines.EventLoop: EventLoop()
androidx.core.app.RemoteActionCompat: RemoteActionCompat()
kotlinx.coroutines.internal.LockFreeLinkedListNode: LockFreeLinkedListNode()
android.support.v4.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
com.badlogic.gdx.graphics.Texture$TextureWrap: com.badlogic.gdx.graphics.Texture$TextureWrap[] values()
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.reflect.Method preHandler()
com.badlogic.gdx.graphics.Pixmap$Filter: com.badlogic.gdx.graphics.Pixmap$Filter valueOf(java.lang.String)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: java.nio.ByteBuffer newPixmap(long[],int,int,int)
com.badlogic.gdx.graphics.glutils.GLVersion$Type: com.badlogic.gdx.graphics.glutils.GLVersion$Type valueOf(java.lang.String)
androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
com.badlogic.gdx.controllers.android.AndroidControllers: AndroidControllers()
kotlinx.coroutines.scheduling.Task: Task()
com.badlogic.gdx.math.Vector3: Vector3()
kotlinx.coroutines.CompletionHandlerBase: CompletionHandlerBase()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer: GLFrameBuffer()
com.badlogic.gdx.math.Quaternion: Quaternion()
kotlinx.coroutines.scheduling.WorkQueue: WorkQueue()
com.hasanchik.game.AndroidLauncher: AndroidLauncher()
kotlin.coroutines.AbstractCoroutineContextElement: AbstractCoroutineContextElement(kotlin.coroutines.CoroutineContext$Key)
com.badlogic.gdx.math.collision.Ray: Ray()
com.badlogic.gdx.graphics.Pixmap$Filter: com.badlogic.gdx.graphics.Pixmap$Filter[] values()
android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.versionedparcelable.CustomVersionedParcelable: CustomVersionedParcelable()
com.badlogic.gdx.graphics.TextureData$TextureDataType: com.badlogic.gdx.graphics.TextureData$TextureDataType[] values()
com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent: DefaultAndroidInput$TouchEvent()
com.badlogic.gdx.graphics.glutils.GLVersion$Type: com.badlogic.gdx.graphics.glutils.GLVersion$Type[] values()
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType valueOf(java.lang.String)
kotlin.internal.PlatformImplementations: PlatformImplementations()
kotlin.internal.jdk8.JDK8PlatformImplementations: JDK8PlatformImplementations()
androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
kotlinx.coroutines.internal.AtomicOp: AtomicOp()
com.badlogic.gdx.Input$Orientation: com.badlogic.gdx.Input$Orientation[] values()
com.badlogic.gdx.utils.ObjectMap: ObjectMap()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void free(long)
kotlinx.coroutines.internal.ThreadSafeHeap: ThreadSafeHeap()
kotlinx.coroutines.android.HandlerDispatcher: HandlerDispatcher()
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Drawable createAdaptiveIconDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
com.badlogic.gdx.graphics.glutils.HdpiMode: com.badlogic.gdx.graphics.glutils.HdpiMode valueOf(java.lang.String)
com.badlogic.gdx.controllers.AbstractControllerManager: AbstractControllerManager()
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getType(java.lang.Object)
com.badlogic.gdx.Input$Orientation: com.badlogic.gdx.Input$Orientation valueOf(java.lang.String)
androidx.core.graphics.drawable.IconCompat$Api30Impl: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)
androidx.core.graphics.drawable.IconCompat: IconCompat()
kotlin.UninitializedPropertyAccessException: UninitializedPropertyAccessException()
kotlinx.coroutines.android.AndroidDispatcherFactory: AndroidDispatcherFactory()
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key getKey()
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter[] values()
com.badlogic.gdx.graphics.Texture$TextureWrap: com.badlogic.gdx.graphics.Texture$TextureWrap valueOf(java.lang.String)
kotlinx.coroutines.scheduling.SchedulerTimeSource: SchedulerTimeSource()
kotlinx.coroutines.YieldContext: YieldContext()
com.badlogic.gdx.utils.IntMap$Entry: IntMap$Entry()
com.badlogic.gdx.utils.Array: Array()
kotlin.coroutines.AbstractCoroutineContextElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)
kotlin.jvm.internal.ReflectionFactory: ReflectionFactory()
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format[] values()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void clear(long,int)
androidx.core.graphics.drawable.IconCompat$Api28Impl: java.lang.String getResPackage(java.lang.Object)
com.badlogic.gdx.graphics.glutils.HdpiMode: com.badlogic.gdx.graphics.glutils.HdpiMode[] values()
androidx.core.app.CoreComponentFactory: CoreComponentFactory()
kotlinx.coroutines.internal.CtorCache: CtorCache()
lombok.launch.AnnotationProcessorHider$AnnotationProcessor: AnnotationProcessorHider$AnnotationProcessor()
com.badlogic.gdx.graphics.Pixmap$Blending: com.badlogic.gdx.graphics.Pixmap$Blending[] values()
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
com.badlogic.gdx.controllers.android.ControllerLifeCycleListener: ControllerLifeCycleListener(com.badlogic.gdx.controllers.android.AndroidControllers)
androidx.core.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
androidx.core.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
lombok.launch.AnnotationProcessorHider$ClaimingProcessor: AnnotationProcessorHider$ClaimingProcessor()
android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
